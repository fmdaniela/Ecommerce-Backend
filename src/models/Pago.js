import { DataTypes } from 'sequelize';
import sequelize from '../db/connection.js';

const Pago = sequelize.define('Pago', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  monto: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  metodoPago: {
    type: DataTypes.ENUM('tarjeta', 'efectivo', 'transferencia'),
    allowNull: false
  },
  estadoPago: {
    type: DataTypes.ENUM('pendiente', 'aprobado', 'rechazado', 'cancelado'),
    allowNull: false
  },
  fechaPago: {
    type: DataTypes.DATE,
    allowNull: false,  //El backend recibe la fecha de pago oficial desde la pasarela (en la respuesta de la API).
  },
  referencia_externa: {
    type: DataTypes.STRING(100),
    allowNull: false
  },
  idOrdenCompra: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: {
        model: 'ordenesCompras', 
        key: 'id'
      },
      unique: true // esto asegura la relaci√≥n 1:1
    }
  }, {
    tableName: 'pagos',
    timestamps: false
  });

export default Pago;

/*
üìå ¬øPor qu√© va unique: true?
Cuando defin√≠s una relaci√≥n 1:1, ten√©s que asegurarte de que ninguna de las dos entidades se repita en el otro lado.

En este caso:
Cada orden debe tener solo un pago asociado.
Cada pago debe pertenecer a una √∫nica orden.
Por eso, al poner unique: true en la FK idOrdenCompra (dentro del modelo Pago), Sequelize se asegura de que no haya dos pagos con el mismo idOrdenCompra, cumpliendo as√≠ la restricci√≥n de uno a uno.
*/

/*
¬øPor qu√© conviene SIN defaultValue: DataTypes.NOW en este caso?
Porque cuando uses una pasarela como Mercado Pago, Stripe o similar:
El backend recibe la fecha de pago oficial desde la pasarela (en la respuesta de la API).
Esa es la fecha que quer√©s guardar, no la fecha en la que se insert√≥ en tu base (que podr√≠a ser minutos despu√©s de que se proces√≥ el pago).
*/